# This is a basic workflow to help you get started with Actions

name: CI/CD of containers with GitHub Actions

env:
  resourcegroup: tailspintoys-test
  containerregistry: mcwWorkshopRegistryName.azurecr.io
  registryusername: mcwWorkshopRegistryName
  imagename: mcwWorkshopRegistryName.azurecr.io/tailspintoys/web

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
  
      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.containerregistry }}
          username: ${{ env.registryusername }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.imagename }}:${{ github.sha }}

      - name: Upload arm templates to workflow
        uses: actions/upload-artifact@v2
        with:
          name: armtemplate
          path: ${{ github.workspace }}/armtemplate/
  deploy-dev:
    runs-on: ubuntu-latest
    environment:
      name: Development
      url: https://${{ steps.deploy_site.outputs.webappname }}.azurewebsites.net
    needs: build

    steps:
      - name: Download armtemplate
        uses: actions/download-artifact@v2
        with:
          name: armtemplate

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run ARM deploy
        uses: azure/arm-deploy@v1
        id: deploy_site
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTIONID }}
          resourceGroupName: ${{ env.resourcegroup }}
          template: ./azuredeploy.json
          parameters:
            environment=dev
            administratorLogin=MySuperAdmin
            administratorLoginPassword=${{ secrets.DBPASSWORD }}
      
      - name: Deploy webapp to staging slot
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp config container set \
                        --resource-group ${{ env.resourcegroup }} \
                        --name ${{ env.webAppName }} \
                        --docker-custom-image-name ${{ env.imagename }}:${{ github.sha }} \
                        --docker-registry-server-password ${{ secrets.REGISTRY_PASSWORD }} \
                        --docker-registry-server-url https://${{ env.containerregistry }} \
                        --docker-registry-server-user ${{ env.registryusername }} \
                        --slot staging

      - name: Swap slots for webapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp deployment slot swap -g ${{ env.resourcegroup }} -n ${{ env.webAppName }} --slot staging --target-slot production

  deploy-test:
    runs-on: ubuntu-latest
    needs: deploy-dev
    steps:
      - name: Download armtemplate
        uses: actions/download-artifact@v2
        with:
          name: armtemplate

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run ARM deploy
        uses: azure/arm-deploy@v1
        id: deploy_site
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTIONID }}
          resourceGroupName: ${{ env.resourcegroup }}
          template: ./azuredeploy.json
          parameters:
            environment=dev
            administratorLogin=MySuperAdmin
            administratorLoginPassword=${{ secrets.DBPASSWORD }}
      
      - name: Deploy webapp to staging slot
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp config container set \
                        --resource-group ${{ env.resourcegroup }} \
                        --name ${{ env.webAppName }} \
                        --docker-custom-image-name ${{ env.imagename }}:${{ github.sha }} \
                        --docker-registry-server-password ${{ secrets.REGISTRY_PASSWORD }} \
                        --docker-registry-server-url https://${{ env.containerregistry }} \
                        --docker-registry-server-user ${{ env.registryusername }} \
                        --slot staging

      - name: Swap slots for webapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp deployment slot swap -g ${{ env.resourcegroup }} -n ${{ env.webAppName }} --slot staging --target-slot production

  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-test
    steps:
      - name: Download armtemplate
        uses: actions/download-artifact@v2
        with:
          name: armtemplate

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run ARM deploy
        uses: azure/arm-deploy@v1
        id: deploy_site
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTIONID }}
          resourceGroupName: ${{ env.resourcegroup }}
          template: ./azuredeploy.json
          parameters:
            environment=dev
            administratorLogin=MySuperAdmin
            administratorLoginPassword=${{ secrets.DBPASSWORD }}
      
      - name: Deploy webapp to staging slot
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp config container set \
                        --resource-group ${{ env.resourcegroup }} \
                        --name ${{ env.webAppName }} \
                        --docker-custom-image-name ${{ env.imagename }}:${{ github.sha }} \
                        --docker-registry-server-password ${{ secrets.REGISTRY_PASSWORD }} \
                        --docker-registry-server-url https://${{ env.containerregistry }} \
                        --docker-registry-server-user ${{ env.registryusername }} \
                        --slot staging

      - name: Swap slots for webapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp deployment slot swap -g ${{ env.resourcegroup }} -n ${{ env.webAppName }} --slot staging --target-slot production
